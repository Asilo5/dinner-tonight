{"version":3,"sources":["components/FormSearch/FormSearch.js","components/Recipe/Recipe.js","components/RecipeContainer/RecipeContainer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FormSearch","handleChange","e","setState","target","name","value","submitRecipe","preventDefault","props","getRecipe","state","ingredient","className","placeholder","type","this","onChange","onClick","Component","Recipe","title","publisher","image","recipeLink","src","alt","href","RecipeContainer","recipes","map","recipe","key","recipe_id","id","image_url","source_url","API_KEY","App","a","fetch","api_call","json","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oXA0CeA,G,kBArCX,aAAe,IAAD,8BACZ,+CAMFC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,SAR/B,EAWdC,aAAe,SAACL,GACdA,EAAEM,iBAEF,EAAKC,MAAMC,UAAU,EAAKC,MAAMC,YAEhC,EAAKT,SAAS,CAAES,WAAa,MAd7B,EAAKD,MAAQ,CACXC,WAAY,IAHF,E,sEAoBJ,IAAD,OACL,OACI,8BACI,2BACGC,UAAU,gBACVC,YAAY,0CACZC,KAAK,OACLV,KAAK,aACLC,MAAOU,KAAKL,MAAMC,WAClBK,SAAU,SAACf,GAAD,OAAO,EAAKD,aAAaC,MAEtC,4BAAQW,UAAU,aAAaK,QAAS,SAAChB,GAAD,OAAO,EAAKK,aAAaL,KAAjE,e,GAhCSiB,cCUVC,G,YAXA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACtC,OACI,6BAASX,UAAU,UACjB,gCAAMQ,EAAN,KACA,yBAAKR,UAAU,aAAaY,IAAKF,EAAOG,IAAKL,IAC7C,mCAASC,GACT,4BAAQT,UAAU,mBAAkB,uBAAGc,KAAMH,GAAT,mBCY/BI,EAjBS,SAACnB,GACvB,IAAMoB,EAAUpB,EAAMoB,QAAQC,KAAI,SAACC,GAC/B,OAAO,kBAAC,EAAD,CAAQC,IAAKD,EAAOE,UACZC,GAAIH,EAAOE,UACXZ,MAAOU,EAAOV,MACdC,UAAWS,EAAOT,UAClBC,MAAOQ,EAAOI,UACdX,WAAYO,EAAOK,gBAGtC,OACE,6BAASvB,UAAU,oBAClBgB,ICXCQ,EAAU,mCA6BDC,E,YA1Bb,aAAe,IAAD,8BACZ,+CAMF5B,UAPc,uCAOF,WAAOE,GAAP,iBAAA2B,EAAA,sEACaC,MAAM,4CAAD,OAA6CH,EAA7C,cAA0DzB,EAA1D,cADlB,cACJ6B,EADI,gBAESA,EAASC,OAFlB,OAEJC,EAFI,OAGV,EAAKxC,SAAS,CAAE0B,QAAUc,EAAKd,UAHrB,2CAPE,sDAEZ,EAAKlB,MAAQ,CACXkB,QAAS,IAHC,E,sEAcZ,OACE,6BAAShB,UAAU,OACjB,4BAAQA,UAAU,cAChB,iDAEF,kBAAC,EAAD,CAAYH,UAAWM,KAAKN,YAC5B,kBAAC,EAAD,CAAiBmB,QAASb,KAAKL,MAAMkB,e,GArB3BV,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b992f35.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './FormSearch.css'\n\n\nclass FormSearch extends Component {\n    constructor() {\n      super();\n      this.state = {\n        ingredient: ''\n      }\n    }\n\n    handleChange = (e) => {\n      this.setState({ [e.target.name] : e.target.value})\n    }\n\n    submitRecipe = (e) => {\n      e.preventDefault();\n\n      this.props.getRecipe(this.state.ingredient);\n\n      this.setState({ ingredient : ''});\n    }\n\n\n    render() {\n        return(\n            <form>\n                <input \n                   className='search-recipe'\n                   placeholder='What ingredient do you fancy tonight?..'\n                   type='text' \n                   name='ingredient'\n                   value={this.state.ingredient}\n                   onChange={(e) => this.handleChange(e)}\n                   />\n                <button className='search-btn' onClick={(e) => this.submitRecipe(e)}>Search</button>\n            </form>\n        )\n    }\n}\n\nexport default FormSearch;","import React from 'react';\nimport './Recipe.css'\n\nconst Recipe = ({title, publisher, image, recipeLink}) => {\n    return(\n        <section className='recipe'>\n          <h3> {title} </h3>\n          <img className='recipe-img' src={image} alt={title}/>\n          <p> By: {publisher}</p>\n          <button className='view-recipe-btn'><a href={recipeLink}>View Recipe</a></button>\n        </section>\n    )\n}\n\nexport default Recipe;","import React from 'react';\nimport './RecipeContainer.css';\nimport Recipe from '../Recipe/Recipe';\n\nconst RecipeContainer = (props) => {\n  const recipes = props.recipes.map((recipe) => {\n      return <Recipe key={recipe.recipe_id} \n                     id={recipe.recipe_id}\n                     title={recipe.title}\n                     publisher={recipe.publisher}\n                     image={recipe.image_url}\n                     recipeLink={recipe.source_url}\n                     />\n    })\n  return (\n    <section className='recipe-container'>\n    {recipes}\n    </section>\n  )\n}\n\nexport default RecipeContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport FormSearch from '../FormSearch/FormSearch';\nimport RecipeContainer from '../RecipeContainer/RecipeContainer';\n\nconst API_KEY = '2328b6e1ad7d799035a86bee44248fd1';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      recipes: []\n    }\n  }\n\n  getRecipe = async (ingredient) => {\n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${ingredient}&count=12`);\n    const data = await api_call.json(); \n    this.setState({ recipes : data.recipes });\n  }\n\n  render() {\n    return (\n      <section className='App'>\n        <header className='App-header'>\n          <h1> Dinner Tonight </h1>\n        </header>\n        <FormSearch getRecipe={this.getRecipe}/>\n        <RecipeContainer recipes={this.state.recipes}/>\n      </section>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}